# .github/workflows/ci-build-sign.yml
name: Lint‑Build‑Sign (Chainguard PHP – no‑Composer)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: php‑app

jobs:
  # 1) Cheap syntax lint inside Chainguard PHP
  lint:
    runs-on: ubuntu-latest
    container:
      # Runtime image is enough; it already contains the PHP CLI
      image: cgr.dev/chainguard/php:latest
      options: --entrypoint ''     # ignore the default entrypoint
    steps:
      - uses: actions/checkout@v4

      - name: Syntax‑check every *.php file
        run: |
          set -euxo pipefail
          # exits non‑zero on the first parse error
          find . -type f -name '*.php' -print0 \
            | xargs -0 -n1 php -l

  # 2) Build, push, sign & verify an OCI image
  build-and-sign:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write          # push to GHCR
      id-token: write          # OIDC for keyless Cosign
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (multi‑arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image (Chainguard base)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          file: Dockerfile       # starts FROM cgr.dev/chainguard/php:latest
          provenance: true       # emits SLSA provenance

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image (keyless, via OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Verify signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign verify ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
